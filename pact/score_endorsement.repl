; defining namespace
(begin-tx)
(env-data {"init": true, "score-admin-keyset": ["admin-pubkey"], "score-user-keyset": ["org1-pubkey"]})
(define-namespace 'free (read-keyset 'score-admin-keyset) (read-keyset 'score-admin-keyset))
(env-sigs [{ "key": "admin-pubkey", "caps": [] }])
(namespace 'free)
(define-keyset "free.score-admin-keyset" (read-keyset "score-admin-keyset"))

(commit-tx)

(begin-tx)
(env-sigs [{ "key": "admin-pubkey", "caps": [] }])
(namespace 'free)
(define-keyset "free.score-user-keyset" (read-keyset "score-user-keyset"))

(commit-tx)


; check that smart contract is deployed correctly 
(begin-tx)
(env-sigs [{ "key": "admin-pubkey", "caps": [] }])
(namespace 'free)

(load "score_endorsement.pact")

(commit-tx)
(env-sigs [])


; check that error when not signed with score-user-keyset
 
(begin-tx)

(expect-failure "should return error" (free.score-endorsement-module.create-score-endorsement "76543" "Tom" "2023-07-23T13:30:45Z" 100500.1 "as:12,s:1,r:23" "1,4,5A" "6"))

(commit-tx)
(env-sigs [])

;check that write is correct
(env-sigs [{ "key": "org1-pubkey", "caps": [ (free.score-endorsement-module.CREATE_SCORE_ENDORSEMENT) ] } ])
(begin-tx)
(free.score-endorsement-module.create-score-endorsement "76543" "Tom" "2023-07-23" 100500.1 "as:12,s:1,r:23" "1,4,5A" "6")

(commit-tx)
(env-sigs [])
(env-data {})


; check that read by id and name is correct
(begin-tx)
(expect "should read by id and name" {"id": "76543","name": "Tom","date": "2023-07-23","score": 100500.1,"graph": "as:12,s:1,r:23","testsTaken": "1,4,5A","scoreEndorsementOrg": "6"} (free.score-endorsement-module.read-score-endorsement "76543" "Tom"))

(commit-tx)
(env-sigs [])
(env-data {})


; should fail when wrong name
(begin-tx)
(expect-failure "should return error when trying to look up with wrong name" (free.score-endorsement-module.read-score-endorsement "76543" "Andy"))

(commit-tx)
(env-sigs [])
(env-data {})